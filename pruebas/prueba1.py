class NodoCancion:
    def __init__(self, titulo, artista, duracion):
        self.titulo = titulo
        self.artista = artista
        self.duracion = duracion  # en segundos
        self.siguiente = None

    def __str__(self):
        return f"{self.titulo} - {self.artista} ({self.formatear_duracion()})"
    
    def formatear_duracion(self):
        minutos = self.duracion // 60
        segundos = self.duracion % 60
        return f"{minutos}:{segundos:02d}"

class Playlist:
    def __init__(self, nombre):
        self.nombre = nombre
        self.inicio = None
        self.actual = None
        self.tama√±o = 0
    
    def esta_vacia(self):
        return self.inicio is None
    
    def a√±adir_cancion(self, titulo, artista, duracion):
        nueva_cancion = NodoCancion(titulo, artista, duracion)
        
        if self.esta_vacia():
            self.inicio = nueva_cancion
            self.actual = nueva_cancion
        else:
            actual = self.inicio
            while actual.siguiente is not None:
                actual = actual.siguiente
            actual.siguiente = nueva_cancion
        
        self.tama√±o += 1
        print(f"‚úì '{titulo}' a√±adida a la playlist")
    
    def a√±adir_cancion_posicion(self, titulo, artista, duracion, posicion):
        if posicion < 1 or posicion > self.tama√±o + 1:
            print("‚ùå Posici√≥n inv√°lida")
            return False
        
        nueva_cancion = NodoCancion(titulo, artista, duracion)
        
        if posicion == 1:  # Al inicio
            nueva_cancion.siguiente = self.inicio
            self.inicio = nueva_cancion
            if self.actual is None:
                self.actual = nueva_cancion
        else:
            actual = self.inicio
            for _ in range(posicion - 2):
                actual = actual.siguiente
            nueva_cancion.siguiente = actual.siguiente
            actual.siguiente = nueva_cancion
        
        self.tama√±o += 1
        print(f"‚úì '{titulo}' a√±adida en posici√≥n {posicion}")
        return True
    
    def eliminar_cancion(self, titulo):
        if self.esta_vacia():
            print("‚ùå La playlist est√° vac√≠a")
            return False
        
        # Caso especial: eliminar la primera canci√≥n
        if self.inicio.titulo.lower() == titulo.lower():
            if self.actual == self.inicio:
                self.actual = self.inicio.siguiente if self.inicio.siguiente else self.inicio
            eliminada = self.inicio
            self.inicio = self.inicio.siguiente
            self.tama√±o -= 1
            print(f"‚úì '{eliminada.titulo}' eliminada de la playlist")
            return True
        
        # Buscar la canci√≥n a eliminar
        anterior = self.inicio
        actual = self.inicio.siguiente
        
        while actual is not None:
            if actual.titulo.lower() == titulo.lower():
                if self.actual == actual:
                    self.actual = actual.siguiente if actual.siguiente else self.inicio
                anterior.siguiente = actual.siguiente
                self.tama√±o -= 1
                print(f"‚úì '{actual.titulo}' eliminada de la playlist")
                return True
            anterior = actual
            actual = actual.siguiente
        
        print(f"‚ùå Canci√≥n '{titulo}' no encontrada")
        return False
    
    def eliminar_posicion(self, posicion):
        if self.esta_vacia():
            print(" La playlist est√° vac√≠a")
            return False
        
        if posicion < 1 or posicion > self.tama√±o:
            print(" Posici√≥n inv√°lida")
            return False
        
        if posicion == 1:
            if self.actual == self.inicio:
                self.actual = self.inicio.siguiente if self.inicio.siguiente else self.inicio
            eliminada = self.inicio
            self.inicio = self.inicio.siguiente
            self.tama√±o -= 1
            print(f"‚úì '{eliminada.titulo}' eliminada de la posici√≥n {posicion}")
            return True
        
        anterior = self.inicio
        actual = self.inicio.siguiente
        contador = 2
        
        while actual is not None:
            if contador == posicion:
                if self.actual == actual:
                    self.actual = actual.siguiente if actual.siguiente else self.inicio
                anterior.siguiente = actual.siguiente
                self.tama√±o -= 1
                print(f"‚úì '{actual.titulo}' eliminada de la posici√≥n {posicion}")
                return True
            anterior = actual
            actual = actual.siguiente
            contador += 1
        
        return False
    
    def reproducir_actual(self):
        if self.esta_vacia():
            print("No hay canciones en la playlist")
            return
        
        print(f"Reproduciendo: {self.actual}")
    
    def siguiente(self):
        if self.esta_vacia():
            print("No hay canciones en la playlist")
            return
        
        if self.actual.siguiente is not None:
            self.actual = self.actual.siguiente
        else:
            self.actual = self.inicio  # Volver al inicio
        
        print("Siguiente canci√≥n:")
        self.reproducir_actual()
    
    def anterior(self):
        if self.esta_vaza():
            print("No hay canciones en la playlist")
            return
        
        # En lista simple, debemos recorrer desde el inicio
        if self.actual == self.inicio:
            # Si es la primera, ir a la √∫ltima
            actual = self.inicio
            while actual.siguiente is not None:
                actual = actual.siguiente
            self.actual = actual
        else:
            # Buscar el nodo anterior al actual
            anterior = self.inicio
            while anterior.siguiente != self.actual:
                anterior = anterior.siguiente
            self.actual = anterior
        
        print(" Canci√≥n anterior:")
        self.reproducir_actual()
    
    def buscar_cancion(self, titulo):
        actual = self.inicio
        posicion = 1
        
        while actual is not None:
            if actual.titulo.lower() == titulo.lower():
                print(f" Encontrada en posici√≥n {posicion}: {actual}")
                return actual, posicion
            actual = actual.siguiente
            posicion += 1
        
        print(f" Canci√≥n '{titulo}' no encontrada")
        return None, -1
    
    def mostrar_playlist(self):
        if self.esta_vacia():
            print(" La playlist est√° vac√≠a")
            return
        
        print(f"\nüé∂ PLAYLIST: {self.nombre} ({self.tama√±o} canciones)")
        print("=" * 60)
        
        actual = self.inicio
        posicion = 1
        
        while actual is not None:
            indicador = "‚ñ∂ " if actual == self.actual else "  "
            print(f"{indicador}{posicion:2d}. {actual}")
            actual = actual.siguiente
            posicion += 1
        print("=" * 60)
        print(f"  Duraci√≥n total: {self.duracion_total()}\n")
    
    def duracion_total(self):
        total = 0
        actual = self.inicio
        
        while actual is not None:
            total += actual.duracion
            actual = actual.siguiente
        
        minutos = total // 60
        segundos = total % 60
        horas = minutos // 60
        minutos = minutos % 60
        
        if horas > 0:
            return f"{horas}h {minutos:02d}m {segundos:02d}s"
        else:
            return f"{minutos:02d}m {segundos:02d}s"

def mostrar_menu():
    print("\n" + "=" * 50)
    print(" MEN√ö PLAYLIST MUSICAL")
    print("=" * 50)
    print("1. Mostrar playlist")
    print("2. A√±adir canci√≥n al final")
    print("3.  A√±adir canci√≥n en posici√≥n espec√≠fica")
    print("4. Eliminar canci√≥n por t√≠tulo")
    print("5.  Eliminar canci√≥n por posici√≥n")
    print("6. Buscar canci√≥n")
    print("7.  Reproducir canci√≥n actual")
    print("8  Siguiente canci√≥n")
    print("9.   Canci√≥n anterior")
    print("10. Mostrar duraci√≥n total")
    print("11. Salir")
    print("=" * 50)

def main():
    # Crear playlist inicial con algunas canciones
    playlist = Playlist("Mi Playlist Personal")
    
    # Canciones de ejemplo
    canciones_ejemplo = [
        ("Bohemian Rhapsody", "Queen", 355),
        ("Hotel California", "Eagles", 391),
        ("Imagine", "John Lennon", 183)
    ]
    
    for titulo, artista, duracion in canciones_ejemplo:
        playlist.a√±adir_cancion(titulo, artista, duracion)
    
    while True:
        mostrar_menu()
        try:
            opcion = int(input("\nSelecciona una opci√≥n (1-11): "))
            
            if opcion == 1:
                playlist.mostrar_playlist()
                
            elif opcion == 2:
                print("\nA√±adir nueva canci√≥n:")
                titulo = input("T√≠tulo: ")
                artista = input("Artista: ")
                try:
                    duracion = int(input("Duraci√≥n en segundos: "))
                    playlist.a√±adir_cancion(titulo, artista, duracion)
                except ValueError:
                    print("La duraci√≥n debe ser un n√∫mero")
                    
            elif opcion == 3:
                print("\nA√±adir canci√≥n en posici√≥n espec√≠fica:")
                titulo = input("T√≠tulo: ")
                artista = input("Artista: ")
                try:
                    duracion = int(input("Duraci√≥n en segundos: "))
                    posicion = int(input("Posici√≥n: "))
                    playlist.a√±adir_cancion_posicion(titulo, artista, duracion, posicion)
                except ValueError:
                    print("La duraci√≥n y posici√≥n deben ser n√∫meros")
                    
            elif opcion == 4:
                print("\nEliminar canci√≥n por t√≠tulo:")
                titulo = input("T√≠tulo de la canci√≥n a eliminar: ")
                playlist.eliminar_cancion(titulo)
                
            elif opcion == 5:
                print("\nEliminar canci√≥n por posici√≥n:")
                try:
                    posicion = int(input("N√∫mero de posici√≥n a eliminar: "))
                    playlist.eliminar_posicion(posicion)
                except ValueError:
                    print("La posici√≥n debe ser un n√∫mero")
                    
            elif opcion == 6:
                print("\nBuscar canci√≥n:")
                titulo = input("T√≠tulo de la canci√≥n a buscar: ")
                playlist.buscar_cancion(titulo)
                
            elif opcion == 7:
                print("\nReproduciendo:")
                playlist.reproducir_actual()
                
            elif opcion == 8:
                playlist.siguiente()
                
            elif opcion == 9:
                playlist.anterior()
                
            elif opcion == 10:
                print(f"\nDuraci√≥n total: {playlist.duracion_total()}")
                
            elif opcion == 11:
                print("üé∂ ¬°Gracias por usar el reproductor musical! ")
                break
                
            else:
                print("Opci√≥n inv√°lida. Por favor elige 1-11.")
                
            # Pausa para ver resultados
            input("\nPresiona Enter para continuar...")
            
        except ValueError:
            print("Por favor ingresa un n√∫mero v√°lido")
        except KeyboardInterrupt:
            print("\n\nPrograma interrumpido. ¬°Hasta luego! ")
            break

if __name__ == "__main__":
    main()